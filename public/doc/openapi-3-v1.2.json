{
    "openapi": "3.0.0",
    "info": {
        "title": "Insights Approval Service API",
        "description": "The API to create and query approval requests",
        "version": "1.2.2",
        "contact": {
            "email": "support@redhat.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        }
    },
    "tags": [
        {
            "name": "Action",
            "description": "Operations on actions"
        },
        {
            "name": "Request",
            "description": "Operations on requests"
        },
        {
            "name": "Template",
            "description": "Operations on templates"
        },
        {
            "name": "Workflow",
            "description": "Operations on workflows"
        },
        {
            "name": "Graphql",
            "description": "Operations on GraphQL"
        }
    ],
    "paths": {
        "/graphql": {
            "post": {
                "tags": [
                    "Graphql"
                ],
                "summary": "Perform a GraphQL query",
                "operationId": "postGraphql",
                "description": "Perform a GraphQL query",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GraphqlIn"
                            }
                        }
                    },
                    "description": "GraphQL query request",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Returned objects found by GraphQL query",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GraphqlOut"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/openapi.json": {
          "get": {
            "summary": "Return this API document in JSON format",
            "operationId": "getDocumentation",
            "responses": {
              "200": {
                "description": "The API document for this version of the API",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "/actions/{id}": {
            "get": {
                "tags": [
                  "Action"
                ],
                "summary": "Return an action",
                "description": "Find an action by its id, available to everyone",
                "operationId": "showAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returned the action",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/Action"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/schemas/HttpApiErrorCollection"
                    },
                    "403": {
                        "$ref": "#/components/schemas/HttpApiErrorCollection"
                    },
                    "404": {
                        "$ref": "#/components/schemas/HttpApiErrorCollection"
                    }
                }
            }
        },
        "/requests/{request_id}/actions": {
            "post": {
                "tags": [
                  "Action"
                ],
                "summary": "Create an action under the request",
                "description": "Create an action under a request identified by its id. Admin can create approve, deny, memo, and cancel operations; approver can create approve, deny, and memo operations; while requester can create only cancel operation.",
                "operationId": "createAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/request_id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Action",
                                "required": [
                                    "operation"
                                ]
                            }
                        }
                    },
                    "description": "Action object that needs to be added",
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Created an action",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Action"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/schemas/HttpApiErrorCollection"
                    },
                    "403": {
                        "$ref": "#/components/schemas/HttpApiErrorCollection"
                    },
                    "404": {
                        "$ref": "#/components/schemas/HttpApiErrorCollection"
                    }
                }
            },
            "get": {
                "tags": [
                  "Action"
                ],
                "summary": "List all actions of a request",
                "description": "Find actions of a request identified by its id, available to everyone",
                "operationId": "listActionsByRequest",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/request_id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returned a list of actions",
                        "headers": {
                            "X-total-count": {
                                "description": "Total number of items",
                                "schema": {
                                    "type": "integer"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ActionCollection"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/schemas/HttpApiErrorCollection"
                    },
                    "403": {
                        "$ref": "#/components/schemas/HttpApiErrorCollection"
                    },
                    "404": {
                        "$ref": "#/components/schemas/HttpApiErrorCollection"
                    }
                }
            }
        },
        "/requests": {
            "get": {
                "tags": [
                  "Request"
                ],
                "summary": "List filtered requests, available to everyone",
                "description": "The result depends on the x-rh-persona header (approval/admin, approval/requseter, or approval/approver). Program generated child requests are not included.",
                "operationId": "listRequests",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/persona"
                    },
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    },
                    {
                        "$ref": "#/components/parameters/filter"
                    },
                    {
                        "$ref": "#/components/parameters/sort_by"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returned a list of requests",
                        "headers": {
                            "X-total-count": {
                                "description": "Total number of items",
                                "schema": {
                                    "type": "integer"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RequestCollection"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/schemas/HttpApiErrorCollection"
                    },
                    "403": {
                        "$ref": "#/components/schemas/HttpApiErrorCollection"
                    },
                    "404": {
                        "$ref": "#/components/schemas/HttpApiErrorCollection"
                    }
                }
            },
            "post": {
                "tags": [
                  "Request"
                ],
                "summary": "Create a new approval request",
                "description": "Create an approval request using given parameters, available to everyone",
                "operationId": "createRequest",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RequestIn"
                            }
                        }
                    },
                    "description": "Parameters needed to create a request",
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Created an approval request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Request"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/schemas/HttpApiErrorCollection"
                    },
                    "403": {
                        "$ref": "#/components/schemas/HttpApiErrorCollection"
                    },
                    "404": {
                        "$ref": "#/components/schemas/HttpApiErrorCollection"
                    }
                }
            }
        },
        "/requests/{id}": {
            "get": {
                "tags": [
                  "Request"
                ],
                "summary": "Return an approval request",
                "description": "Find an approval request by its id, available to anyone who can access the request",
                "operationId": "showRequest",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returned the approval request",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/Request"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/schemas/HttpApiErrorCollection"
                    },
                    "403": {
                        "$ref": "#/components/schemas/HttpApiErrorCollection"
                    },
                    "404": {
                        "$ref": "#/components/schemas/HttpApiErrorCollection"
                    }
                }
            }
        },
        "/requests/{request_id}/requests": {
            "get": {
                "tags": [
                  "Request"
                ],
                "summary": "List filtered child requests of a request",
                "description": "Find child requests based on the parent request id. The result depends on the x-rh-persona header (approval/admin, approval/requseter, or approval/approver).",
                "operationId": "listRequestsByRequest",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/persona"
                    },
                    {
                        "$ref": "#/components/parameters/request_id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returned a list of requests",
                        "headers": {
                            "X-total-count": {
                                "description": "Total number of items",
                                "schema": {
                                    "type": "integer"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RequestCollection"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/schemas/HttpApiErrorCollection"
                    },
                    "403": {
                        "$ref": "#/components/schemas/HttpApiErrorCollection"
                    },
                    "404": {
                        "$ref": "#/components/schemas/HttpApiErrorCollection"
                    }
                }
            }
        },
        "/requests/{request_id}/content": {
            "get": {
                "tags": [
                  "Request"
                ],
                "summary": "Return the request content of a request",
                "description": "Find the request content based on a request id, available to everyone",
                "operationId": "showRequestContent",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/request_id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returned the request content",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RequestContent"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/schemas/HttpApiErrorCollection"
                    },
                    "403": {
                        "$ref": "#/components/schemas/HttpApiErrorCollection"
                    },
                    "404": {
                        "$ref": "#/components/schemas/HttpApiErrorCollection"
                    }
                }
            }
        },
        "/templates": {
            "get": {
                "tags": [
                  "Template"
                ],
                "summary": "List templates",
                "description": "Find all templates, available to admin only",
                "operationId": "listTemplates",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    },
                    {
                        "$ref": "#/components/parameters/filter"
                    },
                    {
                        "$ref": "#/components/parameters/sort_by"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returned a list of templates",
                        "headers": {
                            "X-total-count": {
                                "description": "Total number of items",
                                "schema": {
                                    "type": "integer"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateCollection"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/schemas/HttpApiErrorCollection"
                    },
                    "403": {
                        "$ref": "#/components/schemas/HttpApiErrorCollection"
                    },
                    "404": {
                        "$ref": "#/components/schemas/HttpApiErrorCollection"
                    }
                }
            }
        },
        "/templates/{id}": {
            "get": {
                "tags": [
                  "Template"
                ],
                "summary": "Return a template",
                "description": "Find a template by its id, available to admin only",
                "operationId": "showTemplate",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returned the template",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/Template"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/schemas/HttpApiErrorCollection"
                    },
                    "403": {
                        "$ref": "#/components/schemas/HttpApiErrorCollection"
                    },
                    "404": {
                        "$ref": "#/components/schemas/HttpApiErrorCollection"
                    }
                }
            }
        },
        "/workflows": {
            "get": {
                "tags": [
                  "Workflow"
                ],
                "summary": "List approval workflows",
                "description": "Find approval workflows matching search parameters, available to admin only. Optionally select workflows linked to a resource object whose app_name, object_type and object_id are specified by query parameters. Default sorting is by sequence number in ascending order.",
                "operationId": "listWorkflows",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/app_name"
                    },
                    {
                        "$ref": "#/components/parameters/object_id"
                    },
                    {
                        "$ref": "#/components/parameters/object_type"
                    },
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    },
                    {
                        "$ref": "#/components/parameters/filter"
                    },
                    {
                        "$ref": "#/components/parameters/sort_by"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returned a list of workflows",
                        "headers": {
                            "X-total-count": {
                                "description": "Total number of items",
                                "schema": {
                                    "type": "integer"
                                }
                            }
                        },
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/WorkflowCollection"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/schemas/HttpApiErrorCollection"
                    },
                    "403": {
                        "$ref": "#/components/schemas/HttpApiErrorCollection"
                    },
                    "404": {
                        "$ref": "#/components/schemas/HttpApiErrorCollection"
                    }
                }
            }
        },
        "/templates/{template_id}/workflows": {
            "get": {
                "tags": [
                  "Workflow"
                ],
                "summary": "List all workflows belonging to a template",
                "description": "Find workflows based on the template id, available to admin only",
                "operationId": "listWorkflowsByTemplate",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/template_id"
                    },
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    },
                    {
                        "$ref": "#/components/parameters/filter"
                    },
                    {
                        "$ref": "#/components/parameters/sort_by"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returned a list of workflows",
                        "headers": {
                            "X-total-count": {
                                "description": "Total number of items",
                                "schema": {
                                    "type": "integer"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WorkflowCollection"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/schemas/HttpApiErrorCollection"
                    },
                    "403": {
                        "$ref": "#/components/schemas/HttpApiErrorCollection"
                    },
                    "404": {
                        "$ref": "#/components/schemas/HttpApiErrorCollection"
                    }
                }
            },
            "post": {
                "tags": [
                  "Workflow"
                ],
                "summary": "Create a workflow from a template",
                "description": "Create a workflow from a template identified by its id, available to admin only",
                "operationId": "addWorkflowToTemplate",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/template_id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Workflow",
                                "required": [
                                    "name",
                                    "group_refs"
                                ]
                            }
                        }
                    },
                    "description": "Parameters needed to create a workflow",
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Created a workflow",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Workflow"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/schemas/HttpApiErrorCollection"
                    },
                    "403": {
                        "$ref": "#/components/schemas/HttpApiErrorCollection"
                    },
                    "404": {
                        "$ref": "#/components/schemas/HttpApiErrorCollection"
                    }
                }
            }
        },
        "/workflows/{id}": {
            "get": {
                "tags": [
                  "Workflow"
                ],
                "summary": "Return an approval workflow",
                "description": "Find an approval workflow by its id, available to admin only",
                "operationId": "showWorkflow",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returned the workflow",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/Workflow"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/schemas/HttpApiErrorCollection"
                    },
                    "403": {
                        "$ref": "#/components/schemas/HttpApiErrorCollection"
                    },
                    "404": {
                        "$ref": "#/components/schemas/HttpApiErrorCollection"
                    }
                }
            },
            "patch": {
                "tags": [
                  "Workflow"
                ],
                "summary": "Update an approval workflow",
                "description": "Find an approval workflow by its id and update its content, available to admin only",
                "operationId": "updateWorkflow",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Workflow",
                                "required": [
                                    "name",
                                    "group_refs"
                                ]
                           }
                        }
                    },
                    "description": "Parameters needed to update an approval workflow",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Returned the updated workflow",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/Workflow"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/schemas/HttpApiErrorCollection"
                    },
                    "403": {
                        "$ref": "#/components/schemas/HttpApiErrorCollection"
                    },
                    "404": {
                        "$ref": "#/components/schemas/HttpApiErrorCollection"
                    }
                }
            },
            "delete": {
                "tags": [
                  "Workflow"
                ],
                "summary": "Delete an approval workflow",
                "description": "Delete an approval workflow by its id, available to admin only",
                "operationId": "destroyWorkflow",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted the workflow"
                    },
                    "400": {
                        "$ref": "#/components/schemas/HttpApiErrorCollection"
                    },
                    "403": {
                        "$ref": "#/components/schemas/HttpApiErrorCollection"
                    },
                    "404": {
                        "$ref": "#/components/schemas/HttpApiErrorCollection"
                    }
                }
            }
        },
        "/workflows/{id}/link": {
            "post": {
                "tags": [
                  "Workflow"
                ],
                "summary": "Create a resource link to a workflow",
                "operationId": "linkWorkflow",
                "description": "Link a resource object to a workflow identified by its id, available to admin only",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ResourceObject"
                            }
                        }
                    },
                    "description": "Parameters needed to create a link",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Created a link"
                    },
                    "400": {
                        "$ref": "#/components/schemas/HttpApiErrorCollection"
                    },
                    "403": {
                        "$ref": "#/components/schemas/HttpApiErrorCollection"
                    },
                    "404": {
                        "$ref": "#/components/schemas/HttpApiErrorCollection"
                    }
                }
            }
        },
        "/workflows/{id}/unlink": {
            "post": {
                "tags": [
                  "Workflow"
                ],
                "summary": "Break the link between a resource object and a workflow",
                "operationId": "unlinkWorkflow",
                "description": "Break the link between a resource object selected by the body and a workflow by its id, available to admin only",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ResourceObject"
                            }
                        }
                    },
                    "description": "Parameters needed to select a resource object",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Broke the link"
                    },
                    "400": {
                        "$ref": "#/components/schemas/HttpApiErrorCollection"
                    },
                    "403": {
                        "$ref": "#/components/schemas/HttpApiErrorCollection"
                    },
                    "404": {
                        "$ref": "#/components/schemas/HttpApiErrorCollection"
                    }
                }
            }
        },
        "/workflows/{id}/reposition": {
            "post": {
                "tags": [
                  "Workflow"
                ],
                "summary": "Adjust the position of a workflow",
                "operationId": "reposition",
                "description": "Adjust the position of a workflow related to others by an offset number",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Reposition"
                            }
                        }
                    },
                    "description": "How many levels should the sequence be brought up or down",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Changed the sequence"
                    },
                    "400": {
                        "$ref": "#/components/schemas/HttpApiErrorCollection"
                    },
                    "403": {
                        "$ref": "#/components/schemas/HttpApiErrorCollection"
                    },
                    "404": {
                        "$ref": "#/components/schemas/HttpApiErrorCollection"
                    }
                }
            }
        }
    },
    "security": [
        {
            "BasicAuth": []
        }
    ],
    "servers": [
        {
            "url": "https://cloud.redhat.com/{basePath}",
            "description": "Production Server",
            "variables": {
                "basePath": {
                    "default": "/api/approval/v1.2"
                }
            }
        },
        {
            "url": "http://localhost:{port}/{basePath}",
            "description": "Development Server",
            "variables": {
                "port": {
                    "default": "3000"
                },
                "basePath": {
                    "default": "/api/approval/v1.2"
                }
            }
        }
    ],
    "components": {
        "parameters": {
            "id": {
                "name": "id",
                "in": "path",
                "description": "ID used to select a resource",
                "required": true,
                "schema": {
                    "type": "string",
                    "pattern": "^\\d+$"
                }
            },
            "template_id": {
                "name": "template_id",
                "in": "path",
                "description": "ID of a template",
                "required": true,
                "schema": {
                    "type": "string",
                    "pattern": "^\\d+$"
                }
            },
            "workflow_id": {
                "name": "workflow_id",
                "in": "path",
                "description": "ID of a workflow",
                "required": true,
                "schema": {
                    "type": "string",
                    "pattern": "^\\d+$"
                }
            },
            "request_id": {
                "name": "request_id",
                "in": "path",
                "description": "ID of a request",
                "required": true,
                "schema": {
                    "type": "string",
                    "pattern": "^\\d+$"
                }
            },
            "limit": {
                "name": "limit",
                "in": "query",
                "description": "Maximum number of items per page. Used by pagination",
                "required": false,
                "schema": {
                    "type": "integer",
                    "format": "int32",
                    "minimum": 1,
                    "maximum": 1000,
                    "default": 100
                }
            },
            "offset": {
                "name": "offset",
                "in": "query",
                "description": "Number of items to skip before starting to collect the result set. Used by pagination",
                "required": false,
                "schema": {
                    "type": "integer",
                    "format": "int32",
                    "minimum": 0,
                    "default": 0
                }
            },
            "app_name": {
                "name": "app_name",
                "in": "query",
                "description": "Name of the application",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "object_id": {
                "name": "object_id",
                "in": "query",
                "description": "ID of a resource object",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "object_type": {
                "name": "object_type",
                "in": "query",
                "description": "Type of a resource object",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "filter": {
                "in": "query",
                "name": "filter",
                "description": "Filter for querying collections",
                "required": false,
                "style": "deepObject",
                "explode": true,
                "schema": {
                    "type": "object"
                }
            },
            "sort_by": {
                "name": "sort_by",
                "in": "query",
                "description": "Attribute used to sort a collection",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "persona": {
                "in": "header",
                "name": "x-rh-persona",
                "description": "Desired persona of the current login user",
                "required": false,
                "schema": {
                    "type": "string",
                    "enum": ["approval/admin", "approval/approver", "approval/requester"]
                }
            }
        },
        "securitySchemes": {
            "Basic_auth": {
                "type": "http",
                "description": "The userid/password is needed when accessing this API externally",
                "scheme": "basic"
            }
        },
        "schemas": {
            "GraphqlIn": {
                "type": "object",
                "properties": {
                    "query": {
                        "type": "string",
                        "title": "Query",
                        "description": "The GraphQL query",
                        "default": "{}",
                        "example": "{ workflows {  id template_id name  } }"
                    },
                    "operationName": {
                        "type": "string",
                        "title": "Operation name",
                        "description": "If the query contains several named operations, the operationName controls which one should be executed",
                        "default": "",
                        "example": "searchByName"
                    },
                    "variables": {
                        "type": "object",
                        "title": "Variables",
                        "description": "Optional query variables",
                        "nullable": true,
                        "example": "{\"workflow_id\":3}"
                    }
                },
                "required": [
                    "query"
                ]
            },
            "GraphqlOut": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "title": "Data",
                        "description": "Results from the GraphQL query"
                    },
                    "errors": {
                        "type": "array",
                        "title": "Errors",
                        "description": "Errors resulting from the GraphQL query",
                        "items": {
                            "type": "object"
                        }
                    }
                }
            },
            "Action": {
                "type": "object",
                "description": "An action that changes the state of a request",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Action ID",
                        "description": "ID of the action",
                        "example": "123",
                        "readOnly": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Created time",
                        "description": "Time when the action was created",
                        "example": "2020-04-12T11:23:16Z",
                        "readOnly": true
                    },
                    "request_id": {
                        "type": "string",
                        "title": "Request ID",
                        "description": "ID of the request that the action belongs to",
                        "example": "123",
                        "readOnly": true
                    },
                    "processed_by": {
                        "type": "string",
                        "title": "Processed by",
                        "description": "The person who performs the action",
                        "example": "John Doe"
                    },
                    "operation": {
                        "type": "string",
                        "title": "Operation",
                        "description": "Action type, must be one of the predefined values. The request state will be updated according to the operation.",
                        "enum": [
                            "approve",
                            "cancel",
                            "deny",
                            "error",
                            "notify",
                            "memo",
                            "skip",
                            "start"
                        ],
                        "default": "memo",
                        "example": "memo"
                    },
                    "comments": {
                        "type": "string",
                        "title": "Comments",
                        "description": "Comments for action",
                        "example": "Cannot approve the request due to lacking of resources",
                        "nullable": true
                    }
                }
            },
            "ResourceObject": {
                "type": "object",
                "description": "Resource object definition",
                "required": [
                    "object_type",
                    "app_name",
                    "object_id"
                ],
                "properties": {
                    "object_type": {
                        "type": "string",
                        "title": "Object type",
                        "description": "Object type",
                        "example": "Portfolio"
                    },
                    "app_name": {
                        "type": "string",
                        "title": "App name",
                        "description": "Name of the application that the object belongs to",
                        "example": "catalog-api"
                    },
                    "object_id": {
                        "type": "string",
                        "title": "Object ID",
                        "description": "ID of the object",
                        "example": "123"
                    }
                }
            },
            "RequestIn": {
                "type": "object",
                "description": "Input parameters for approval request object",
                "required": [
                    "name",
                    "content",
                    "tag_resources"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Request name",
                        "description": "Name of the the request to be created",
                        "example": "VM order"
                    },
                    "description": {
                        "type": "string",
                        "title": "Description",
                        "description": "Describe the request in more details",
                        "example": "Order a higher end VM for production"
                    },
                    "content": {
                        "type": "object",
                        "title": "Content",
                        "description": "Content of the request in JSON format",
                        "example": "{\"CPU\":2,\"Memory\":\"16G\",\"Disk\":\"320G\"}"
                    },
                    "tag_resources": {
                        "type": "array",
                        "title": "Request tags",
                        "description": "An array of resource tags that determine the workflows for the request",
                        "items": {
                          "$ref": "#/components/schemas/TagResource"
                        }
                    }
                }
            },
            "TagResource": {
                "type": "object",
                "description": "Resource with tags",
                "required": [
                    "app_name",
                    "object_type",
                    "tags"
                ],
                "properties": {
                    "app_name": {
                        "type": "string",
                        "title": "App name",
                        "description": "Name of the app that the resource belongs to",
                        "example": "catalog-api"
                    },
                    "object_type": {
                        "type": "string",
                        "title": "Resource type",
                        "description": "The type of the resource",
                        "example": "Portfolio"
                    },
                    "tags": {
                        "type": "array",
                        "title": "Tags",
                        "description": "An array of tags that the resource is tagged with",
                        "items": {
                            "$ref": "#/components/schemas/Tag"
                        }
                    }
                }
            },
            "Tag": {
                "type": "object",
                "description": "tag details",
                "properties": {
                    "tag": {
                        "type": "string",
                        "title": "Tag",
                        "description": "The string representation of the tag",
                        "example": "/namespace/architecture=x86_64"
                    }
                },
                "additionalProperties": false
            },
            "Request": {
                "type": "object",
                "description": "Approval request. It may have child requests. Only a leaf node request can have workflow_id",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Request ID",
                        "description": "ID of the request",
                        "readOnly": true
                    },
                    "state": {
                        "type": "string",
                        "title": "State",
                        "description": "The state of the request, must be one of the predefined values",
                        "enum": [
                            "canceled",
                            "completed",
                            "failed",
                            "notified",
                            "pending",
                            "skipped",
                            "started"
                        ],
                        "readOnly": true,
                        "example": "completed"
                    },
                    "decision": {
                        "type": "string",
                        "title": "Decision",
                        "description": "Approval decision, must be one of the predefined values",
                        "enum": [
                            "undecided",
                            "approved",
                            "canceled",
                            "denied",
                            "error"
                        ],
                        "readOnly": true,
                        "example": "approved"
                    },
                    "reason": {
                        "type": "string",
                        "title": "Reason",
                        "description": "Optional reason for the decision, present normally when the decision is denied",
                        "readOnly": true,
                        "nullable": true,
                        "example": "Reject the request because the inventory is low"
                    },
                    "workflow_id": {
                        "type": "string",
                        "title": "Workflow ID",
                        "description": "ID of the workflow that the request belongs to. Present only if the request is a leaf node",
                        "readOnly": true,
                        "nullable": true,
                        "example": "123"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Created Time",
                        "description": "Time when the request was created",
                        "readOnly": true,
                        "example": "2020-04-12T11:23:16Z"
                    },
                    "notified_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Notified time",
                        "description": "Time when a notification was sent to approvers",
                        "readOnly": true,
                        "nullable": true,
                        "example": "2020-04-12T11:23:16Z"
                    },
                    "finished_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Finished time",
                        "description": "Time when the request was finished (skipped, canceled, or completed)",
                        "readOnly": true,
                        "nullable": true,
                        "example": "2020-04-12T11:23:16Z"
                    },
                    "number_of_children": {
                        "type": "integer",
                        "title": "Sub-requests",
                        "description": "Number of child requests",
                        "readOnly": true,
                        "example": 0
                    },
                    "number_of_finished_children": {
                        "type": "integer",
                        "title": "Finished sub-requests",
                        "description": "Number of finished child requests",
                        "readOnly": true,
                        "example": 0
                    },
                    "owner": {
                        "type": "string",
                        "title": "Owner",
                        "description": "Identification of whom made the request",
                        "readOnly": true,
                        "example": "customer@redhat.com"
                    },
                    "requester_name": {
                        "type": "string",
                        "title": "Requester name",
                        "description": "Full name of the requester",
                        "readOnly": true,
                        "example": "John Doe"
                    },
                    "name": {
                        "type": "string",
                        "title": "Request name",
                        "description": "Name of the request to be created",
                        "readOnly": true,
                        "example": "VM order"
                    },
                    "description": {
                        "type": "string",
                        "title": "Description",
                        "description": "Describe the request in more details",
                        "readOnly": true,
                        "example": "Order a higher end VM for production"
                    },
                    "group_name": {
                        "type": "string",
                        "title": "Approver group(s)",
                        "description": "Name of approver group(s) assigned to approve this request",
                        "readOnly": true,
                        "example": "Finance,Engineering"
                    },
                    "parent_id": {
                        "type": "string",
                        "title": "Parent ID",
                        "description": "ID of the parent group if present",
                        "readOnly": true,
                        "example": "123"
                    },
                    "metadata": {
                        "type": "object",
                        "title": "Metadata",
                        "description": "JSON metadata about the request",
                        "readOnly": true,
                        "example": "{\"user_capabilities\":{\"show\":true,\"create\":true,\"approve\":true,\"cancel\":true,\"deny\":true,\"memo\":true}}"
                    }
                }
            },
            "RequestContent": {
                "type": "object",
                "description": "The content of a request"
            },
            "Template": {
                "type": "object",
                "description": "The template to categorize workflows",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Template ID",
                        "description": "ID of the template",
                        "readOnly": true,
                        "example": "123"
                    },
                    "title": {
                        "type": "string",
                        "title": "Name",
                        "description": "Name of the template",
                        "readOnly": true,
                        "example": "Basic"
                    },
                    "description": {
                        "type": "string",
                        "title": "Description",
                        "description": "Describe the template with more details",
                        "readOnly": true,
                        "example": "A multi-level approval process"
                    },
                    "metadata": {
                        "type": "object",
                        "title": "Metadata",
                        "description": "JSON metadata about the template",
                        "readOnly": true,
                        "example": "{\"user_capabilities\":{\"show\":true}}"
                    }
                }
            },
            "Workflow": {
                "description": "The workflow to process approval requests. Each workflow is linked to multiple groups of approvals.",
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Workflow ID",
                        "description": "ID of the workflow",
                        "readOnly": true,
                        "example": "123"
                    },
                    "template_id": {
                        "type": "string",
                        "title": "Template ID",
                        "description": "ID of the template that the workflow belongs to",
                        "readOnly": true,
                        "example": "456"
                    },
                    "name": {
                        "type": "string",
                        "title": "Name",
                        "description": "Name of the workflow",
                        "example": "Basic IT"
                    },
                    "description": {
                        "type": "string",
                        "title": "Description",
                        "description": "Describe the workflow in more details",
                        "nullable": true,
                        "example": "A approval process requires ID department to approve"
                    },
                    "group_refs": {
                        "type": "array",
                        "title": "Approval groups",
                        "description": "Array of RBAC groups associated with workflow. The groups need to have approval permission",
                        "items": {
                            "$ref": "#/components/schemas/GroupRef"
                         },
                        "nullable": true,
                        "uniqueItems": true
                    },
                    "metadata": {
                        "type": "object",
                        "title": "Metadata",
                        "description": "JSON metadata about the workflow",
                        "readOnly": true,
                        "example": "{\"user_capabilities\":{\"link\":true,\"show\":true,\"update\":true,\"unlink\":true,\"destroy\":true,\"create\":true,\"reposition\":true},\"object_dependencies\":{\"catalog\":[\"Portfolio\", \"PortfolioItem\"], \"sources\":[\"Source\"]}}"
                    }
                }
            },
            "GroupRef": {
                "type": "object",
                "description": "Group reference describing a RBAC group name and ID",
                "required": [
                    "uuid"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Group name",
                        "description": "Name of the RBAC group",
                        "example": "Finance"
                    },
                    "uuid": {
                        "type": "string",
                        "title": "Group UUID",
                        "description": "RBAC ID of the group",
                        "format": "uuid",
                        "example": "20560093-369e-412b-9c73-a6799f966447"
                    }
                }
            },
            "Reposition": {
                "description": "The desired increment relative to its current position, or placement to top or bottom of the list.",
                "type": "object",
                "properties": {
                    "increment": {
                        "type": "integer",
                        "title": "Increment",
                        "description": "Move the record up (negative) or down (positive) in the list. Do not set it if placement is used",
                        "example": -2,
                        "nullable": true
                    },
                    "placement": {
                        "type": "string",
                        "title": "Placement",
                        "description": "Place the record to the top or bottom of the list. Do not set it if increment is used",
                        "enum": [
                            "bottom",
                            "top"
                        ],
                        "example": "top",
                        "nullable": true
                    }
                }
            },
            "ActionCollection": {
                "type": "object",
                "properties": {
                    "meta": {
                        "$ref": "#/components/schemas/CollectionMetadata"
                    },
                    "links": {
                        "$ref": "#/components/schemas/CollectionLinks"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/Action"
                        }
                    }
                }
            },
            "RequestCollection": {
                "type": "object",
                "properties": {
                    "meta": {
                        "$ref": "#/components/schemas/CollectionMetadata"
                    },
                    "links": {
                        "$ref": "#/components/schemas/CollectionLinks"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/Request"
                        }
                    }
                }
            },
            "TemplateCollection": {
                "type": "object",
                "properties": {
                    "meta": {
                        "$ref": "#/components/schemas/CollectionMetadata"
                    },
                    "links": {
                        "$ref": "#/components/schemas/CollectionLinks"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/Template"
                        }
                    }
                }
            },
            "WorkflowCollection": {
                "type": "object",
                "properties": {
                    "meta": {
                        "$ref": "#/components/schemas/CollectionMetadata"
                    },
                    "links": {
                        "$ref": "#/components/schemas/CollectionLinks"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/Workflow"
                        }
                    }
                }
            },
            "CollectionLinks": {
                "type": "object",
                "properties": {
                    "first": {
                        "type": "string",
                        "title": "First Link",
                        "description": "The link to fetch the first group of items in the result set"
                    },
                    "last": {
                        "type": "string",
                        "title": "Last Link",
                        "description": "The link to fetch the last group of items in the result set"
                    },
                    "prev": {
                        "type": "string",
                        "title": "Previous Link",
                        "description": "The link to fetch the previous group of items in the result set"
                    },
                    "next": {
                        "type": "string",
                        "title": "Next Link",
                        "description": "The link to fetch the next group of items in the result set"
                    }
                }
            },
            "CollectionMetadata": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "title": "Total items",
                        "description": "Total number of items in the result set, of which only a subset is returned defined by the QueryLimit parameter"
                    },
                    "limit": {
                        "type": "integer",
                        "title": "Items per page",
                        "description": "The number of items each page can display"
                    },
                    "offset": {
                        "type": "integer",
                        "title": "Offset",
                        "description": "Offset from beginning of the result set"
                    }
                }
            },
            "HttpApiErrorCollection": {
                "type": "object",
                "description": "API Error collection",
                "properties": {
                    "errors": {
                        "type": "array",
                        "title": "Error list",
                        "description": "Error list from the API query",
                        "items": {
                            "$ref": "#/components/schemas/HttpApiError"
                        }
                    }
                }
            },
            "HttpApiError": {
                "type": "object",
                "description": "API Error",
                "properties": {
                    "status": {
                        "type": "string",
                        "title": "Status code",
                        "description": "HTTP status code",
                        "example": "400"
                    },
                    "details": {
                        "type": "string",
                        "title": "Details",
                        "description": "Error details",
                        "example": "Bad Request"
                    }
                }
            }
        }
    }
}
